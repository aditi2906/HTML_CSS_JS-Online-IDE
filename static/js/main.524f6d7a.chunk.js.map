{"version":3,"sources":["Components/Editor.js","hooks/useLocalStorage.js","Components/App.js","index.js"],"names":["Editor","props","language","displayName","value","onChange","useState","open","setOpen","className","type","onClick","prevOpen","icon","faCompressAlt","faExpandAlt","onBeforeChange","editor","data","options","lineWrapping","lint","mode","theme","lineNumbers","useLocalStorage","key","initialValue","prefixedKey","jsonValue","localStorage","getItem","JSON","parse","setValue","useEffect","setItem","stringify","App","html","setHtml","css","setCss","js","setJs","srcDoc","setSrcDoc","timeout","setTimeout","clearTimeout","title","sandbox","frameBorder","width","height","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"sOAYe,SAASA,EAAOC,GAC7B,IACEC,EAIED,EAJFC,SACAC,EAGEF,EAHFE,YACAC,EAEEH,EAFFG,MACAC,EACEJ,EADFI,SAEF,EAAwBC,oBAAS,GAAjC,mBAAOC,EAAP,KAAaC,EAAb,KAMA,OACE,sBAAKC,UAAS,2BAAsBF,EAAO,GAAK,aAAhD,UACE,sBAAKE,UAAU,eAAf,UACGN,EACD,wBACEO,KAAK,SACLD,UAAU,sBACVE,QAAS,kBAAMH,GAAQ,SAAAI,GAAQ,OAAKA,MAHtC,SAKC,cAAC,IAAD,CAAiBC,KAAMN,EAAOO,IAC9BC,WAGH,cAAC,aAAD,CACEC,eAlBN,SAAsBC,EAAQC,EAAMd,GAClCC,EAASD,IAkBLA,MAAOA,EACPK,UAAU,sBACVU,QAAS,CACPC,cAAc,EACdC,MAAM,EACNC,KAAMpB,EACNqB,MAAO,WACPC,aAAa,QC3CR,SAASC,EAAgBC,EAAKC,GAC3C,IAAMC,EAHO,iBAGgBF,EAE7B,EAA0BpB,oBAAS,WACjC,IAAMuB,EAAYC,aAAaC,QAAQH,GACvC,OAAiB,MAAbC,EAA0BG,KAAKC,MAAMJ,GAEb,oBAAjBF,EACFA,IAEAA,KAPX,mBAAOvB,EAAP,KAAc8B,EAAd,KAeA,OAJAC,qBAAU,WACRL,aAAaM,QAAQR,EAAaI,KAAKK,UAAUjC,MAChD,CAACwB,EAAaxB,IAEV,CAACA,EAAO8B,GC6BFI,MA/Cf,WAEE,MAAoBb,EAAgB,OAAO,IAA3C,mBAAMc,EAAN,KAAWC,EAAX,KACA,EAAkBf,EAAgB,MAAM,IAAxC,mBAAMgB,EAAN,KAAUC,EAAV,KACA,EAAgBjB,EAAgB,KAAK,IAArC,mBAAMkB,EAAN,KAASC,EAAT,KACA,EAAyBnB,EAAgB,IAAzC,mBAAOoB,EAAP,KAAcC,EAAd,KAgBA,OAbAX,qBAAU,WACZ,IAAMY,EAAQC,YAAW,WACvBF,EAAS,gCAECP,EAFD,+BAGEE,EAHF,iCAIGE,EAJH,gCAQT,KACF,OAAO,kBAAMM,aAAaF,MACtB,CAACR,EAAKE,EAAIE,IAEV,qCACF,sBAAKlC,UAAU,gBAAf,UACE,cAACT,EAAD,CAAQE,SAAS,MAAMC,YAAY,OACnCC,MAAOmC,EAAMlC,SAAUmC,IACvB,cAACxC,EAAD,CAAQE,SAAS,MAAMC,YAAY,MACnCC,MAAOqC,EAAKpC,SAAUqC,IACvB,cAAC1C,EAAD,CAAQE,SAAS,aAAaC,YAAY,KACzCC,MAAOuC,EAAItC,SAAUuC,OAGvB,qBAAKnC,UAAU,OAAf,SACA,wBACAoC,OAAQA,EACRK,MAAM,SACNC,QAAQ,gBACRC,YAAY,IACZC,MAAM,OACNC,OAAO,eCrCTC,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,W","file":"static/js/main.524f6d7a.chunk.js","sourcesContent":["import React, { useState } from 'react'\r\nimport 'codemirror/lib/codemirror.css'\r\nimport 'codemirror/theme/material.css'\r\nimport 'codemirror/mode/xml/xml'\r\nimport 'codemirror/mode/javascript/javascript'\r\nimport 'codemirror/mode/css/css'\r\nimport { Controlled as ControlledEditor } from 'react-codemirror2'\r\nimport {FontAwesomeIcon} from '@fortawesome/react-fontawesome'\r\nimport {faCompressAlt,faExpandAlt} from '@fortawesome/free-solid-svg-icons'\r\n\r\n\r\n\r\nexport default function Editor(props) {\r\n  const {\r\n    language,\r\n    displayName,\r\n    value,\r\n    onChange\r\n  } = props\r\n  const [open, setOpen] = useState(true)\r\n\r\n  function handleChange(editor, data, value) {\r\n    onChange(value)\r\n  }\r\n\r\n  return (\r\n    <div className={`editor-container ${open ? '' : 'collapsed'}`}>\r\n      <div className=\"editor-title\">\r\n        {displayName}\r\n        <button\r\n          type=\"button\"\r\n          className=\"expand-collapse-btn\"\r\n          onClick={() => setOpen(prevOpen => !prevOpen)}\r\n        >\r\n         <FontAwesomeIcon icon={open ? faCompressAlt:\r\n         faExpandAlt}/>\r\n        </button>\r\n      </div>\r\n      <ControlledEditor\r\n        onBeforeChange={handleChange}\r\n        value={value}\r\n        className=\"code-mirror-wrapper\"\r\n        options={{\r\n          lineWrapping: true,\r\n          lint: true,\r\n          mode: language,\r\n          theme: 'material',\r\n          lineNumbers: true\r\n        }}\r\n      />\r\n    </div>\r\n  )\r\n}","import { useEffect, useState } from 'react'\r\n\r\nconst PREFIX = 'codepen-clone-'\r\n\r\nexport default function useLocalStorage(key, initialValue) {\r\n  const prefixedKey = PREFIX + key\r\n\r\n  const [value, setValue] = useState(() => {\r\n    const jsonValue = localStorage.getItem(prefixedKey)\r\n    if (jsonValue != null) return JSON.parse(jsonValue)\r\n\r\n    if (typeof initialValue === 'function') {\r\n      return initialValue()\r\n    } else {\r\n      return initialValue\r\n    }\r\n  })\r\n\r\n  useEffect(() => {\r\n    localStorage.setItem(prefixedKey, JSON.stringify(value))\r\n  }, [prefixedKey, value])\r\n\r\n  return [value, setValue]\r\n}\r\n","import React, {useState, useEffect} from 'react';\nimport Editor from './Editor'\nimport useLocalStorage from '../hooks/useLocalStorage'\n\nfunction App() {\n\n  const[html,setHtml]=useLocalStorage('html','')\n  const[css,setCss]=useLocalStorage('css','')\n  const[js,setJs]=useLocalStorage('js','')\n  const [srcDoc,setSrcDoc]=useLocalStorage('')\n\n \n  useEffect(()=>{\nconst timeout=setTimeout(()=>{\n  setSrcDoc (`\n  <html>\n    <body>${html}</body>\n    <style>${css}</style>\n    <script>${js}</script>\n  </html>\n  ` )\n\n},100)\nreturn () => clearTimeout(timeout)\n  },[html,css,js])\n  return (\n    <>\n  <div className=\"pane top-pane\">\n    <Editor language=\"xml\" displayName=\"HTML\" \n    value={html} onChange={setHtml} />\n    <Editor language=\"css\" displayName=\"CSS\" \n    value={css} onChange={setCss} />\n   <Editor language=\"javascript\" displayName=\"JS\" \n    value={js} onChange={setJs} />\n\n  </div>\n  <div className=\"pane\">\n  <iframe\n  srcDoc={srcDoc}\n  title=\"output\"\n  sandbox=\"allow-scripts\"\n  frameBorder=\"0\"\n  width=\"100%\"\n  height=\"100%\"\n    />\n    \n    </div>\n  </>\n  )\n}\n\nexport default App;\n\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/App';\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}